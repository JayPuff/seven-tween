let ease =  {
    linear: (x, t, b, c, d) => { return c*t/d + b },
    easeInQuad: (x, t, b, c, d) => { t /= d; return c*t*t + b; },
    easeOutQuad: (x, t, b, c, d) => { t /= d; return -c * t*(t-2) + b; },
    easeInOutQuad: (x, t, b, c, d) => { t /= d/2; if (t < 1) return c/2*t*t + b; t--; return -c/2 * (t*(t-2) - 1) + b; },
    easeInCubic: (x, t, b, c, d) => {t /= d; return c*t*t*t + b; },
    easeOutCubic: (x, t, b, c, d) => { t /= d; t--; return c*(t*t*t + 1) + b; },
    easeInOutCubic: (x, t, b, c, d) => { t /= d/2; if (t < 1) return c/2*t*t*t + b; t -= 2; return c/2*(t*t*t + 2) + b; },
    easeInQuart: (x, t, b, c, d) => { t /= d; return c*t*t*t*t + b; },
    easeOutQuart: (x, t, b, c, d) => { t /= d; t--; return -c * (t*t*t*t - 1) + b; },
    easeInOutQuart: (x, t, b, c, d) => { t /= d/2; if (t < 1) return c/2*t*t*t*t + b; t -= 2; return -c/2 * (t*t*t*t - 2) + b; },
    easeInQuint: (x, t, b, c, d) => { t /= d; return c*t*t*t*t*t + b; },
    easeOutQuint: (x, t, b, c, d) => { t /= d; t--; return c*(t*t*t*t*t + 1) + b; },
    easeInOutQuint: (x, t, b, c, d) => { t /= d/2; if (t < 1) return c/2*t*t*t*t*t + b; t -= 2; return c/2*(t*t*t*t*t + 2) + b; },
    easeInSine: (x, t, b, c, d) => { return -c * Math.cos(t/d * (Math.PI/2)) + c + b; },
    easeOutSine : (x, t, b, c, d) => { return c * Math.sin(t/d * (Math.PI/2)) + b; },
    easeInOutSine: (x, t, b, c, d) => { return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b; },
    easeInExpo: (x, t, b, c, d) => { return c * Math.pow( 2, 10 * (t/d - 1) ) + b; },
    easeOutExpo: (x, t, b, c, d) => { return c * ( -Math.pow( 2, -10 * t/d ) + 1 ) + b; },
    easeInOutExpo: (x, t, b, c, d) => { t /= d/2; if (t < 1) return c/2 * Math.pow( 2, 10 * (t - 1) ) + b; t--; return c/2 * ( -Math.pow( 2, -10 * t) + 2 ) + b; },
    easeInCirc: (x, t, b, c, d) => { t /= d; return -c * (Math.sqrt(1 - t*t) - 1) + b; },
    easeOutCirc: (x, t, b, c, d) => { t /= d; t--; return c * Math.sqrt(1 - t*t) + b; },
    easeInOutCirc: (x, t, b, c, d) => { t /= d/2; if (t < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b; t -= 2; return c/2 * (Math.sqrt(1 - t*t) + 1) + b; },
    easeInBack: (x, t, b, c, d, s) => { if (s == undefined) {s = 1.70158;} return c*(t/=d)*t*((s+1)*t - s) + b; },
    easeOutBack: (x, t, b, c, d, s) => { if (s == undefined) {s = 1.70158;} return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b; },
    easeInOutBack: (x, t, b, c, d, s) => { if (s == undefined) {s = 1.70158;} if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b; return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b; },
    easeInElastic: (x, t, b, c, d) => { var s=1.70158;var p=0;var a=c; if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3; if (a < Math.abs(c)) { a=c; var s=p/4; } else var s = p/(2*Math.PI) * Math.asin (c/a); return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b; },
    easeOutElastic: (x, t, b, c, d) => { var s=1.70158;var p=0;var a=c; if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3; if (a < Math.abs(c)) { a=c; var s=p/4; } else var s = p/(2*Math.PI) * Math.asin (c/a); return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b; },
    easeInOutElastic: (x, t, b, c, d) => { var s=1.70158;var p=0;var a=c; if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5); if (a < Math.abs(c)) { a=c; var s=p/4; } else var s = p/(2*Math.PI) * Math.asin (c/a); if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b; return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b; },
    easeOutBounce: (x, t, b, c, d) => { if ((t/=d) < (1/2.75)) { return c*(7.5625*t*t) + b; } else if (t < (2/2.75)) { return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b; } else if (t < (2.5/2.75)) { return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b; } else { return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b; } },
    easeInBounce: (x, t, b, c, d) => { return c - _ease.easeOutBounce(x, d-t, 0, c, d) + b; },
    easeInOutBounce: (x, t, b, c, d) => { if (t < d/2) return _ease.easeInBounce(x, t*2, 0, c, d) * .5 + b; return _ease.easeOutBounce(x, t*2-d, 0, c, d) * .5 + c*.5 + b; }
}

export default ease